// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (user_id, description, amount) VALUES ($1, $2, $3) RETURNING id, user_id, description, amount, date
`

type CreateExpenseParams struct {
	UserID      int            `json:"user_id"`
	Description string         `json:"description"`
	Amount      pgtype.Numeric `json:"amount"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense, arg.UserID, arg.Description, arg.Amount)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Amount,
		&i.Date,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, role, password) VALUES ($1, $2, $3, $4) RETURNING id, email, username, role, password, created_at
`

type CreateUserParams struct {
	Email    *string      `json:"email"`
	Username string       `json:"username"`
	Role     NullUserRole `json:"role"`
	Password string       `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Role,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const getExpensesByUserID = `-- name: GetExpensesByUserID :many
SELECT id, user_id, description, amount, date FROM expenses WHERE user_id = $1
`

func (q *Queries) GetExpensesByUserID(ctx context.Context, userID int) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Amount,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, role, password, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expenses SET description = $1, amount = $2 WHERE id = $3 AND user_id = $4
`

type UpdateExpenseParams struct {
	Description string         `json:"description"`
	Amount      pgtype.Numeric `json:"amount"`
	ID          int            `json:"id"`
	UserID      int            `json:"user_id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.Exec(ctx, updateExpense,
		arg.Description,
		arg.Amount,
		arg.ID,
		arg.UserID,
	)
	return err
}
